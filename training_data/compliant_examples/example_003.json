{
  "code_sample": "#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Configuration constants - JPL compliant */\nconst uint16_t MAX_THRUST_LEVEL = 1000U;\nconst uint16_t MIN_THRUST_LEVEL = 100U;\nconst uint8_t MAX_ENGINE_COUNT = 8U;\nconst uint32_t MAX_FUEL_CAPACITY = 50000U;\n\n/* Engine status enumeration - MISRA compliant */\ntypedef enum {\n    ENGINE_STATUS_OFF = 0U,\n    ENGINE_STATUS_IDLE = 1U,\n    ENGINE_STATUS_ACTIVE = 2U,\n    ENGINE_STATUS_EMERGENCY = 3U\n} engine_status_t;\n\n/* Engine control structure - NASA compliant */\ntypedef struct {\n    uint8_t engine_id;\n    engine_status_t status;\n    uint16_t thrust_level;\n    uint32_t fuel_remaining;\n    bool is_operational;\n} engine_control_t;\n\n/* Engine array structure - bounded allocation */\ntypedef struct {\n    engine_control_t engines[MAX_ENGINE_COUNT];\n    uint8_t active_engine_count;\n    uint32_t total_fuel_consumption;\n} engine_system_t;\n\n/* Engine parameters structure - NASA Rule 4 compliant */\ntypedef struct {\n    uint16_t target_thrust;\n    uint8_t engine_mask;\n} engine_command_t;\n\n/**\n * @brief Validates engine command parameters\n * @param command Pointer to engine command structure\n * @return true if command is valid, false otherwise\n */\nbool validate_engine_command(const engine_command_t* command) {\n    bool is_valid = false;\n    \n    if (command != NULL) {\n        if (command->target_thrust >= MIN_THRUST_LEVEL && \n            command->target_thrust <= MAX_THRUST_LEVEL) {\n            if (command->engine_mask != 0U) {\n                is_valid = true;\n            }\n        }\n    }\n    \n    return is_valid;\n}\n\n/**\n * @brief Initializes engine system - JPL compliant initialization\n * @param system Pointer to engine system structure\n * @return true if initialization successful, false otherwise\n */\nbool initialize_engine_system(engine_system_t* system) {\n    bool success = false;\n    uint8_t index = 0U;\n    \n    if (system != NULL) {\n        system->active_engine_count = 0U;\n        system->total_fuel_consumption = 0U;\n        \n        /* Initialize all engines to safe state - JPL Rule 6 */\n        while (index < MAX_ENGINE_COUNT) {\n            system->engines[index].engine_id = index;\n            system->engines[index].status = ENGINE_STATUS_OFF;\n            system->engines[index].thrust_level = 0U;\n            system->engines[index].fuel_remaining = MAX_FUEL_CAPACITY;\n            system->engines[index].is_operational = true;\n            index++;\n        }\n        \n        success = true;\n    }\n    \n    return success;\n}\n\n/**\n * @brief Sets engine thrust level with bounds checking - NASA Rule 2 compliant\n * @param system Pointer to engine system\n * @param engine_id Engine identifier\n * @param thrust_level Target thrust level\n * @return true if thrust set successfully, false otherwise\n */\nbool set_engine_thrust(engine_system_t* system, uint8_t engine_id, uint16_t thrust_level) {\n    bool success = false;\n    \n    if (system != NULL && engine_id < MAX_ENGINE_COUNT) {\n        if (thrust_level >= MIN_THRUST_LEVEL && thrust_level <= MAX_THRUST_LEVEL) {\n            if (system->engines[engine_id].is_operational) {\n                system->engines[engine_id].thrust_level = thrust_level;\n                if (thrust_level > 0U) {\n                    system->engines[engine_id].status = ENGINE_STATUS_ACTIVE;\n                } else {\n                    system->engines[engine_id].status = ENGINE_STATUS_IDLE;\n                }\n                success = true;\n            }\n        }\n    }\n    \n    return success;\n}\n\n/**\n * @brief Processes engine commands with proper error handling - JPL Rule 7\n * @param system Pointer to engine system\n * @param command Pointer to engine command\n * @return Engine operation result code\n */\nint32_t process_engine_command(engine_system_t* system, const engine_command_t* command) {\n    int32_t result = -1; /* Error code - JPL Rule 8 */\n    uint8_t engine_index = 0U;\n    bool command_processed = false;\n    \n    if (system == NULL || command == NULL) {\n        result = -2; /* Invalid parameters */\n    } else if (!validate_engine_command(command)) {\n        result = -3; /* Invalid command */\n    } else {\n        /* Process command for each engine in mask - NASA Rule 2 bounded loop */\n        while (engine_index < MAX_ENGINE_COUNT && !command_processed) {\n            uint8_t engine_mask = 1U << engine_index;\n            if ((command->engine_mask & engine_mask) != 0U) {\n                if (set_engine_thrust(system, engine_index, command->target_thrust)) {\n                    command_processed = true;\n                    result = 0; /* Success */\n                } else {\n                    result = -4; /* Engine operation failed */\n                    break;\n                }\n            }\n            engine_index++;\n        }\n    }\n    \n    return result;\n}\n\n/**\n * @brief Calculates total system fuel consumption - MISRA compliant arithmetic\n * @param system Pointer to engine system\n * @return Total fuel consumption\n */\nuint32_t calculate_total_fuel_consumption(const engine_system_t* system) {\n    uint32_t total_consumption = 0U;\n    uint8_t index = 0U;\n    \n    if (system != NULL) {\n        /* Bounded loop with explicit counter - NASA Rule 2 */\n        while (index < MAX_ENGINE_COUNT) {\n            uint32_t fuel_used = MAX_FUEL_CAPACITY - system->engines[index].fuel_remaining;\n            total_consumption += fuel_used;\n            index++;\n        }\n    }\n    \n    return total_consumption;\n}\n\nint main(void) {\n    engine_system_t engine_system;\n    engine_command_t engine_cmd;\n    bool init_success;\n    int32_t command_result;\n    uint32_t fuel_consumption;\n    \n    /* Initialize system */\n    init_success = initialize_engine_system(&engine_system);\n    \n    if (init_success) {\n        /* Set up engine command - JPL Rule 10 compliant */\n        engine_cmd.target_thrust = 500U;\n        engine_cmd.engine_mask = 0x03U; /* Engines 0 and 1 */\n        \n        /* Process command */\n        command_result = process_engine_command(&engine_system, &engine_cmd);\n        \n        if (command_result == 0) {\n            fuel_consumption = calculate_total_fuel_consumption(&engine_system);\n        }\n    }\n    \n    return (int)command_result;\n}",
  "compliance_score": 99,
  "compliance_level": "fully_compliant",
  "violations": [],
  "annotations": {
    "function_count": 6,
    "line_count": 145,
    "complexity_score": 5,
    "nesting_depth": 4,
    "variable_count": 18,
    "pointer_count": 8,
    "loop_count": 3,
    "conditional_count": 12
  },
  "tags": ["engine_control", "aerospace", "thrust_management", "fuel_systems", "real_time_control"],
  "difficulty": "expert"
}
